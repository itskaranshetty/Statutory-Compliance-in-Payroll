# -*- coding: utf-8 -*-
"""Salary Workings

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uKApGeVITtXrSUdvPqI9B1XcuWPM2BV7

## How to use?

1. Open notebook in colab

2. Upload excel sheet (in content) -> Left pane: 4th button, and then upload button (left-most)

2. Change the initial sheet path, and the revised sheet path according to the name

3. Click on runtime -> Run all

#Constants
"""

import pandas as pd
from math import isnan
from math import inf

#Constants

# CTC_Percent_Increase = 10/100
HRA_SLAB = 40000
PF_SLAB = 12/100
CO_ESIC_SLAB = 3.25/100
EMPL_ESIC_SLAB = 0.75/100
GMC_SLAB_1 = 374
GMC_SLAB_2 = 561 
GMC_SLAB_3 = 1496
GMC_SLAB_4 = 3740
NPS_RATE = 10/100
STATUTORY_RATE = 8.33/100
PLI_RATE = 11.67/100

#Max difference in actual ctc allowed
THRESHOLD = 5

#Path to sheets:

INITIAL_SHEET = "/content/Employee Data as on 31st Jan 2021.xlsx"
REVISED_SHEET = "/content/Revised Sheet 1.xlsx"

#Minimum Wage Slabs for different States

min_wage = {}
min_wage["GUJARAT"] = {"UNSKILLED":8637.2,"SEMI SKILLED":8845.2,"SKILLED":9079.2}
min_wage["ANDHRA PRADESH"] = {"UNSKILLED":9416,"SEMI SKILLED":10438,"SKILLED":11273}
min_wage["GOA"] = {"UNSKILLED":9412,"SEMI SKILLED":10920,"SKILLED":12350}
min_wage["BIHAR"] = {"UNSKILLED":7592,"SEMI SKILLED":7904,"SKILLED":9620,"HIGHLY SKILLED":11726,"CLERICAL":8363,"SUPERVISORY":8363}
min_wage["CHHATTISGARH"] = {"UNSKILLED":9480,"SEMI SKILLED":10130,"SKILLED":10910,"HIGHLY SKILLED":11690}
min_wage["TELANGANA"] = {"UNSKILLED":10349,"SEMI SKILLED":10767,"SKILLED":10969,"HIGHLY SKILLED":11804}
min_wage["UTTAR PRADESH"] = {"UNSKILLED":8758,"SEMI SKILLED":9634,"SKILLED":10791}
min_wage["KARNATAKA"] = {"COMPUTER OPERATOR":14042,"OFFICE ASSISTANT":14042,"JUNIOR CLERK":14042,"SEMI SKILLED":14042,"SENIOR CLERK":15317,"SKILLED":15317,"ASST MANAGER":16719,"MANAGER":17719,"HIGHLY SKILLED":17719}
min_wage["MADHYA PRADESH"] = {"UNSKILLED":8400,"SEMI SKILLED":9257,"SKILLED":10635,"HIGHLY SKILLED":11935}
min_wage["DELHI"] = {"UNSKILLED":15492,"NON-MATRICULATES":17069,"SEMI SKILLED":17069,"MATRICULATES BUT NOT GRADUATE":18797,"SKILLED":18797,"GRADUATE AND ABOVE":20430, "HIGHLY SKILLED":20430}
min_wage["HARYANA"] = {"UNSKILLED":9459,"SEMI SKILLED":9931,"SKILLED":10949,"GRADUATE AND ABOVE":10949,"HIGHLY SKILLED":12072}
min_wage["KERALA"] = {"UNSKILLED":11682,"SEMI SKILLED":11892,"ASST MANAGER":12102,"SKILLED":12102,"MANAGER":12312,"HIGHLY SKILLED":12312}
min_wage["MAHARASHTRA"] = {"UNSKILLED":10957,"SEMI SKILLED":11792,"SKILLED":12568}
min_wage["MIZORAM"] = {"UNSKILLED":7020,"SEMI SKILLED":7800,"SKILLED":9620,"HIGHLY SKILLED":11960}
min_wage["PUNJAB"] = {"UNSKILLED":8777,"SEMI SKILLED":9557,"SKILLED":10454,"HIGHLY SKILLED":11486}
min_wage["RAJASTHAN"] = {"UNSKILLED":5850,"SEMI SKILLED":6162,"SKILLED":6474,"HIGHLY SKILLED":7774}
min_wage["TAMIL NADU"] = {"UNSKILLED":9381,"SHOP ASSISTANT":9381,"CLERK":9492,"SEMI SKILLED":9492,"SUPERVISOR":9533,"TEAM LEADER":9533,"ASST MANAGER":9533,"SKILLED":9533,"MANAGER":9945,"HIGHLY SKILLED":9945}
min_wage["WEST BENGAL"] = {"UNSKILLED":8349,"SEMI SKILLED":9658,"SKILLED":10624,"HIGHLY SKILLED":11686}
min_wage["ODISHA"] = {"UNSKILLED":8034,"SEMI SKILLED":9074,"SKILLED":10374,"HIGHLY SKILLED":11934}
min_wage["JHARKHAND"] = {"UNSKILLED":7810,"SEMI SKILLED":8181,"SKILLED":10785,"HIGHLY SKILLED":12458}
min_wage["ASSAM"] = {"UNSKILLED":8632,"SEMI SKILLED":10071,"UNSKILLED SUPERVISOR":10071,"SKILLED":12589,"CLERICAL":12589,"HIGHLY SKILLED":16185}
min_wage["UTTARAKHAND"] = {"UNSKILLED":8891,"SEMI SKILLED":9484,"SKILLED":10078,"CLERICAL":10078,"HIGHLY SKILLED":11080}

#Prof Tax - Only 1st month value considered

prof_tax = {}

prof_tax["ANDHRA PRADESH"] = {15000 : 0, 20000 : 150, inf : 200}
prof_tax["TELANGANA"] = {15000 : 0, 20000 : 150, inf : 200}
prof_tax["ASSAM"] = {10000 : 0, 15000 : 150, 25000 : 180, inf : 208}
prof_tax["BIHAR"] = {25000 : 0, 41666 : 83.33, 83333 : 166.67, inf : 208.33}
prof_tax["CHHATTISGARH"] = {12500 : 0, 16667 : 150, 20833 : 180, 25000 : 190, inf : 200}
prof_tax["GUJARAT"] = {5999 : 0, 8999 : 80, 11999 : 150, inf : 200}
prof_tax["JHARKHAND"] = {25000 : 0, 41666 : 100, 66666 : 150, 83333 : 175, inf : 208}
prof_tax["KARNATAKA"] = {15000 : 0, inf : 200}
prof_tax["KERALA"] = {1999 : 0, 2999 : 20, 4999 : 30, 7499 : 50, 9999 : 75, 12499 : 100, 16666 : 125, 20833 : 166, inf : 208}
prof_tax["MADHYA PRADESH"] = {225000/12 : 0, 300000/12 : 125, 400000/12 : 166, inf : 208}
prof_tax["MAHARASHTRA"] = {7500 : 0, 10000 : 175, 25000 : 180, inf : 200} #Female <10,000 ignored
prof_tax["MEGHALAYA"] = {50000/12 : 0, 75000/12 : 16.5, 100000/12 : 25, 150000/12 : 41.5, 200000/12 : 62.5, 250000/12 : 83.33, 300000/12 : 104, 350000/12 : 125, 400000/12 : 150, 450000/12 : 175, 500000/12 : 200, inf : 208}
prof_tax["ODISHA"] = {13304 : 0, 25000 : 150, inf : 200}
prof_tax["TAMIL NADU"] = {21000 : 0, 30000 : 135, 45000 : 315, 60000 : 690, 75000 : 1025, inf : 1250}
prof_tax["TRIPURA"] = {7500 : 0, 15000 : 150, inf : 208}
prof_tax["WEST BENGAL"] = {10000 : 0, 15000 : 110, 25000 : 130, 40000 : 150, inf : 200}
prof_tax["PUNJAB"] = {(250000/12)-1 : 0, inf : 200}
prof_tax["PONDICHERRY"] = {15000 : 100, inf : 125}
prof_tax["COIMBATORE"] = {21000 : 0, 30000 : 127, 45000 : 317, 60000 : 634, 75000 : 950, inf : 1268}

prof_tax["ARUNACHAL PRADESH"] = {inf : 0}
prof_tax["ANDAMAN AND NICOBAR"] = {inf : 0}
prof_tax["CHANDIGARH"] = {inf : 0}
prof_tax["DADRA AND NAGAR HAVELI"] = {inf : 0}
prof_tax["DAMAN AND DIU"] = {inf : 0}
prof_tax["DELHI"] = {inf : 0}
prof_tax["GOA"] = {inf : 0}
prof_tax["HARYANA"] = {inf : 0}
prof_tax["HIMACHAL PRADESH"] = {inf : 0}
prof_tax["JAMMU AND KASHMIR"] = {inf : 0}
prof_tax["LAKSHADWEEP"] = {inf : 0}
prof_tax["NAGALAND"] = {inf : 0}
prof_tax["RAJASTHAN"] = {inf : 0}
prof_tax["UTTARANCHAL"] = {inf : 0}
prof_tax["UTTAR PRADESH"] = {inf : 0}
prof_tax["LADAKH"] = {inf : 0}

revised_ctc = pd.read_excel(INITIAL_SHEET)

#Initially:
revised_ctc

# In case a cell is blank, replace with a 0
revised_ctc["CTC"].fillna(0,inplace = True)
revised_ctc["Basic"].fillna(0,inplace = True)
revised_ctc["DA"].fillna(0,inplace = True)
revised_ctc["HRA"].fillna(0,inplace = True)
revised_ctc["Basic+DA"].fillna(0,inplace = True)
revised_ctc["Transport Allowance"].fillna(0,inplace = True)
revised_ctc["Children Edu Allowance"].fillna(0,inplace = True)
revised_ctc["Medical Allowance"].fillna(0,inplace = True)
revised_ctc["Other Allowance"].fillna(0,inplace = True)
revised_ctc["Special Allowance"].fillna(0,inplace = True)
revised_ctc["Gross/Actual Fees"].fillna(0,inplace = True)

# Last row might be total, please remove
revised_ctc = revised_ctc[:-1]
revised_ctc

"""# Code"""

#Helper Functions:

def round_50(amount):
    amount += 50 - (amount % 50)
    return amount

def ch_allowance(x):
    if (x >= 2):
        return 200
    elif (x == 1):
        return 100
    else:
        return 0

def calculate_gmc(Designation):
    if (Designation.upper().strip() in ["ASSISTANT","JR.EXE","SR.EXE","OFFICER","AM","ASSISTANT MANAGER","ASST.MANAGER","ASST.","ASST","EXE","EXECUTIVE","SR. EXE"]):
        return GMC_SLAB_1
    elif (Designation.upper().strip() in ["MGR","MANAGER","SR.MGR","SR.MANAGER","AGM","DGM","GM","AVP","SR.GM","SR. MGR"]):
        return GMC_SLAB_2
    elif (Designation.upper().strip() in ["VP","SVP","COO","CEO","SR.VP","SR. VP"]):
        return GMC_SLAB_3
    elif (Designation.upper().strip() == "MD"):
        return GMC_SLAB_4
    else:
        return "Error in Designation"

def calculate_prof_tax(state,gross):
    for k,v in prof_tax[state].items():
        if (gross <= k):
            return v

"""### Revisions"""

revised_ctc["Revised CTC"] = revised_ctc["CTC"]*(1 + revised_ctc["%increase"])
revised_ctc["Inc in Amt"] = revised_ctc["Revised CTC"] - revised_ctc["CTC"]
revised_ctc["Total Inc in Amt"] = revised_ctc["Revised CTC"] - revised_ctc["CTC"]
revised_ctc["Other Allowances"] = revised_ctc["Transport Allowance"] + revised_ctc["Children Edu Allowance"] + revised_ctc["Medical Allowance"] + revised_ctc["Other Allowance"] + revised_ctc["Special Allowance"]

# Inc in Amt now has Some % increase of CTC + All previous allowances
revised_ctc["Inc in Amt"] += revised_ctc["Other Allowances"]

# First check if Basic is 51% of Gross
revised_ctc["Inc in Basic"] = revised_ctc.apply(lambda x: max(0,min(0.51*x["Gross/Actual Fees"] - x["Basic+DA"],x["Inc in Amt"])), axis = 1)
revised_ctc["Inc in Amt"] -= revised_ctc["Inc in Basic"]

# Second, check if HRA is 50% of Basic+DA
revised_ctc["Inc in HRA"] =revised_ctc.apply(lambda x: min(x["Inc in Amt"], max(0,0.5*x["Basic+DA"] - x["HRA"])) if x["Revised CTC"] > HRA_SLAB else 0, axis = 1) 
revised_ctc["Inc in Amt"] -= revised_ctc["Inc in HRA"]

# Calculate Updated Basic, DA and HRA
revised_ctc["Revised Basic"] = revised_ctc["Basic"] + revised_ctc["Inc in Basic"]
revised_ctc["Revised DA"] = revised_ctc["DA"]
revised_ctc["Revised Basic+DA"] = revised_ctc["Revised Basic"] + revised_ctc["Revised DA"]
revised_ctc["Revised HRA"] = revised_ctc["HRA"] + revised_ctc["Inc in HRA"]

'''
Make all changes such that difference is <5, keep trying (while loop)
'''
def revise_ctc(row):

    #Children Allowance 
    row["Revised Children Edu Allowance"] = ch_allowance(row["Children"])
    row["Inc in Amt"] -= row["Revised Children Edu Allowance"]
    
    #Other allowance alloted
    row["Revised Other Allowance"] = row["Inc in Amt"]
    row["Inc in Amt"] = 0

    Revised = row["Revised Basic+DA"] + row["Revised HRA"]
    row["Revised Gross/Actual Fees"] = Revised + row["Revised Children Edu Allowance"] + row["Revised Other Allowance"]
        
    while True:

        row["Revised Other Allowance"] -= row["Difference"]
        row["Revised Gross/Actual Fees"] -= row["Difference"]

        row["Errors"] = False

        #PF Calculation:
        if row["Revised Gross/Actual Fees"] > 15000:
            row["Revised Co's PF Contribution p.m."] = 1800
        else:
            row["Revised Co's PF Contribution p.m."] = PF_SLAB*row["Revised Gross/Actual Fees"]
        
        row["Revised Empl's PF Contribution p.m."] = row["Revised Co's PF Contribution p.m."]

        #ESIC Calculation:
        if row["Revised Gross/Actual Fees"] > 21000:
            row["Revised ESIC Employer Contri @ 3.25%"] = 0
            row["Revised ESIC Employee Contri @ 0.75%"] = 0
            # Give GMC:
            row["Revised GMC Premium p.m"] = calculate_gmc(row["Grade"])
            if (row["Revised GMC Premium p.m"] == "Error in Designation"):
                row["Errors"] = True
            
        else:
            row["Revised ESIC Employer Contri @ 3.25%"] = CO_ESIC_SLAB*row["Revised Gross/Actual Fees"]
            row["Revised ESIC Employee Contri @ 0.75%"] = EMPL_ESIC_SLAB*row["Revised Gross/Actual Fees"]
            row["Revised GMC Premium p.m"] = 0
            
        # Prof Tax:
        if (row["State"].upper().strip() not in prof_tax):
            row["Revised Prof Tax p.m. & TDS /10%"] = "Error in State"
            row["Errors"] = True
        else:
            row["Revised Prof Tax p.m. & TDS /10%"] = calculate_prof_tax(row["State"].upper().strip(),row["Revised Gross/Actual Fees"])

        if (isinstance(row["Revised Prof Tax p.m. & TDS /10%"],str) == False):
            row["Revised Take home Monthly Salary"] = row["Revised Gross/Actual Fees"] - row["Revised Empl's PF Contribution p.m."] - row["Revised ESIC Employee Contri @ 0.75%"] - row["Revised Prof Tax p.m. & TDS /10%"]
        else:
            row["Revised Take home Monthly Salary"] = row["Revised Gross/Actual Fees"] - row["Revised Empl's PF Contribution p.m."] - row["Revised ESIC Employee Contri @ 0.75%"]
        
        row["Revised Co's Contribution towards Gratuity p.m."] = (row["Revised Basic+DA"]/26)*(15/12)

        #Same as previous:

        row["Revised LTC p.m."] = row["LTC p.m."]
        row["Revised Ticket Meal Vouchers p.m."] = row["Ticket Meal Vouchers p.m."]

        #Recently zeroed:

        row["Revised Transport Allowance"] = 0
        row["Revised Medical Allowance"] = 0
        row["Revised Special Allowance"] = 0
        
        #NPS
        if (row["NPS p.m."] > 0):
            row["Revised NPS p.m."] = NPS_RATE*row["Revised Basic+DA"]
        else:
            row["Revised NPS p.m."] = 0 

        #Minimum Wage Slab

        if (row["State"].upper().strip() not in min_wage):
            row["Revised Minimum Wage Slab Basic+DA"] = "Error in State"
            row["Errors"] = True
        else:
            if (row["Skilled/Semiskilled"].upper().strip() not in min_wage[row["State"].upper().strip()]):
                row["Revised Minimum Wage Slab Basic+DA"] = "Error in Skilled/Semiskilled"
                row["Errors"] = True
            else:
                row["Revised Minimum Wage Slab Basic+DA"] = min_wage[row["State"].upper().strip()][row["Skilled/Semiskilled"].upper().strip()]
                
        #Statutory Bonus and PLI:

        if (row["Revised Basic+DA"] > 21000):
            row["Revised Statutory Bonus p.m 8.33%"] = 0
            row["Revised PLI 11.67%"] = 0
        else:
            if (isinstance(row["Revised Minimum Wage Slab Basic+DA"],str) == False):
                row["Revised Statutory Bonus p.m 8.33%"] = row["Revised Minimum Wage Slab Basic+DA"]*STATUTORY_RATE
                row["Revised PLI 11.67%"] = 0
            else:
                row["Revised Statutory Bonus p.m 8.33%"] = 0
                row["Revised PLI 11.67%"] = 0

        if (isinstance(row["Revised GMC Premium p.m"],str) == False):
            row["Revised CTC Tally"] = row["Revised Gross/Actual Fees"] + row["Revised Co's PF Contribution p.m."] + row["Revised ESIC Employer Contri @ 3.25%"] + row["Revised LTC p.m."] + row["Revised Ticket Meal Vouchers p.m."] + row["Revised NPS p.m."] + row["Revised Statutory Bonus p.m 8.33%"] + row["Revised PLI 11.67%"] + row["Revised GMC Premium p.m"] + row["Revised Co's Contribution towards Gratuity p.m."]
        else:
            row["Revised CTC Tally"] = row["Revised Gross/Actual Fees"] + row["Revised Co's PF Contribution p.m."] + row["Revised ESIC Employer Contri @ 3.25%"] + row["Revised LTC p.m."] + row["Revised Ticket Meal Vouchers p.m."] + row["Revised NPS p.m."] + row["Revised Statutory Bonus p.m 8.33%"] + row["Revised PLI 11.67%"] + row["Revised Co's Contribution towards Gratuity p.m."]
        row["Difference"] = row["Revised CTC Tally"] - row["Revised CTC"]

        if (row["Difference"] >= 0 and row["Difference"] < THRESHOLD):
            break

        if (isnan(row["Difference"])):
            break

    return row

revised_ctc["Difference"] = revised_ctc.apply(lambda row: 0,axis=1)
revised_ctc = revised_ctc.apply(lambda row: revise_ctc(row),axis=1)

'''
Finally, check if basic+da >= 0.51*Revised Gross
If not, then redo the whole thing
'''
def check_basic(row):
    
    if (row["Revised Basic+DA"] >= 0.51*row["Revised Gross/Actual Fees"]):
        return row
    
    basic_increase = min(row["Revised Other Allowance"],0.51*row["Revised Gross/Actual Fees"] - row["Revised Basic+DA"])
    row["Revised Basic+DA"] += basic_increase
    row["Revised Basic"] += basic_increase
    row["Revised Other Allowance"] -= basic_increase

    if (row["Revised CTC"] > HRA_SLAB):
        hra_increase = min(max(0,0.5*row["Revised Basic+DA"] - row["Revised HRA"]),row["Revised Other Allowance"])
        row["Revised HRA"] += hra_increase
        row["Revised Other Allowance"] -= hra_increase

    while True:

        row["Revised Other Allowance"] -= row["Difference"]
        row["Revised Gross/Actual Fees"] -= row["Difference"]

        row["Errors"] = False

        #PF Calculation:
        if row["Revised Gross/Actual Fees"] > 15000:
            row["Revised Co's PF Contribution p.m."] = 1800
        else:
            row["Revised Co's PF Contribution p.m."] = PF_SLAB*row["Revised Gross/Actual Fees"]
        
        row["Revised Empl's PF Contribution p.m."] = row["Revised Co's PF Contribution p.m."]

        #ESIC Calculation:
        if row["Revised Gross/Actual Fees"] > 21000:
            row["Revised ESIC Employer Contri @ 3.25%"] = 0
            row["Revised ESIC Employee Contri @ 0.75%"] = 0
            # Give GMC:
            row["Revised GMC Premium p.m"] = calculate_gmc(row["Grade"])
            if (row["Revised GMC Premium p.m"] == "Error in Designation"):
                row["Errors"] = True
            
        else:
            row["Revised ESIC Employer Contri @ 3.25%"] = CO_ESIC_SLAB*row["Revised Gross/Actual Fees"]
            row["Revised ESIC Employee Contri @ 0.75%"] = EMPL_ESIC_SLAB*row["Revised Gross/Actual Fees"]
            row["Revised GMC Premium p.m"] = 0
            
        # Prof Tax:
        if (row["State"].upper().strip() not in prof_tax):
            row["Revised Prof Tax p.m. & TDS /10%"] = "Error in State"
            row["Errors"] = True
        else:
            row["Revised Prof Tax p.m. & TDS /10%"] = calculate_prof_tax(row["State"].upper().strip(),row["Revised Gross/Actual Fees"])

        if (isinstance(row["Revised Prof Tax p.m. & TDS /10%"],str) == False):
            row["Revised Take home Monthly Salary"] = row["Revised Gross/Actual Fees"] - row["Revised Empl's PF Contribution p.m."] - row["Revised ESIC Employee Contri @ 0.75%"] - row["Revised Prof Tax p.m. & TDS /10%"]
        else:
            row["Revised Take home Monthly Salary"] = row["Revised Gross/Actual Fees"] - row["Revised Empl's PF Contribution p.m."] - row["Revised ESIC Employee Contri @ 0.75%"]

        row["Revised Co's Contribution towards Gratuity p.m."] = (row["Revised Basic+DA"]/26)*(15/12)

        #Same as previous:

        row["Revised LTC p.m."] = row["LTC p.m."]
        row["Revised Ticket Meal Vouchers p.m."] = row["Ticket Meal Vouchers p.m."]

        #Recently zeroed:

        row["Revised Transport Allowance"] = 0
        row["Revised Medical Allowance"] = 0
        row["Revised Special Allowance"] = 0
        
        #NPS
        if (row["NPS p.m."] > 0):
            row["Revised NPS p.m."] = NPS_RATE*row["Revised Basic+DA"]
        else:
            row["Revised NPS p.m."] = 0 

        #Minimum Wage Slab

        if (row["State"].upper().strip() not in min_wage):
            row["Revised Minimum Wage Slab Basic+DA"] = "Error in State"
            row["Errors"] = True
        else:
            if (row["Skilled/Semiskilled"].upper().strip() not in min_wage[row["State"].upper().strip()]):
                row["Revised Minimum Wage Slab Basic+DA"] = "Error in Skilled/Semiskilled"
                row["Errors"] = True
            else:
                row["Revised Minimum Wage Slab Basic+DA"] = min_wage[row["State"].upper().strip()][row["Skilled/Semiskilled"].upper().strip()]
                
        #Statutory Bonus and PLI:

        if (row["Revised Basic+DA"] > 21000):
            row["Revised Statutory Bonus p.m 8.33%"] = 0
            row["Revised PLI 11.67%"] = 0
        else:
            if (isinstance(row["Revised Minimum Wage Slab Basic+DA"],str) == False):
                row["Revised Statutory Bonus p.m 8.33%"] = row["Revised Minimum Wage Slab Basic+DA"]*STATUTORY_RATE
                row["Revised PLI 11.67%"] = 0
            else:
                row["Revised Statutory Bonus p.m 8.33%"] = 0
                row["Revised PLI 11.67%"] = 0

        if (isinstance(row["Revised GMC Premium p.m"],str) == False):
            row["Revised CTC Tally"] = row["Revised Gross/Actual Fees"] + row["Revised Co's PF Contribution p.m."] + row["Revised ESIC Employer Contri @ 3.25%"] + row["Revised LTC p.m."] + row["Revised Ticket Meal Vouchers p.m."] + row["Revised NPS p.m."] + row["Revised Statutory Bonus p.m 8.33%"] + row["Revised PLI 11.67%"] + row["Revised GMC Premium p.m"] + row["Revised Co's Contribution towards Gratuity p.m."]
        else:
            row["Revised CTC Tally"] = row["Revised Gross/Actual Fees"] + row["Revised Co's PF Contribution p.m."] + row["Revised ESIC Employer Contri @ 3.25%"] + row["Revised LTC p.m."] + row["Revised Ticket Meal Vouchers p.m."] + row["Revised NPS p.m."] + row["Revised Statutory Bonus p.m 8.33%"] + row["Revised PLI 11.67%"] + row["Revised Co's Contribution towards Gratuity p.m."]
        row["Difference"] = row["Revised CTC Tally"] - row["Revised CTC"]

        if (row["Difference"] >= 0 and row["Difference"] < THRESHOLD):
            break

        if (isnan(row["Difference"])):
            break

    return row

revised_ctc = revised_ctc.apply(lambda row: check_basic(row),axis=1)

revised_ctc.to_excel(excel_writer = REVISED_SHEET,sheet_name = "Revised Salary")